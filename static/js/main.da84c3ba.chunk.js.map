{"version":3,"sources":["TicTac/TicTac.module.css","TicTac/TicTac.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","tictac","cssClasses","classes","TdCorner","divClasses","value","TdTop","TdLeft","TdRight","TdBottom","TicTac","state","JSON","parse","stringify","isCircle","isGameFinished","reset","setState","onCellClick","rowId","colId","length","push","Circle","Cross","newTicTac","checkWinner","prevState","traverseTicTac","op","searchValue","concat","cellsToBeHighlighted","currentCell","traverseVert","traverseHor","traverseDiagLeftRight","traverseDiagRightLeft","highlightWinner","cellsToHighlight","winner","cell","pop","CrossSuccess","CircleSuccess","winnerClass","winMessage","this","className","WinnerMessage","Fragment","Table","map","_","key","join","Cell","onClick","Button","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.da84c3ba.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Table\":\"TicTac_Table__ksaqr\",\"WinnerMessage\":\"TicTac_WinnerMessage__3yVPw\",\"TdCorner\":\"TicTac_TdCorner__iNjhz\",\"TdLeft\":\"TicTac_TdLeft__1gGsz\",\"TdRight\":\"TicTac_TdRight__1kvlg\",\"TdTop\":\"TicTac_TdTop__1yNus\",\"TdBottom\":\"TicTac_TdBottom__2Ny6A\",\"Cell\":\"TicTac_Cell__12Vtw\",\"Circle\":\"TicTac_Circle__3xVd1\",\"CircleSuccess\":\"TicTac_CircleSuccess__1mtOC\",\"CrossSuccess\":\"TicTac_CrossSuccess__1B8bP\",\"Cross\":\"TicTac_Cross__Nat_G\",\"Button\":\"TicTac_Button__3KJYm\"};","import React, { Component } from 'react';\r\nimport classes from './TicTac.module.css';\r\n\r\nconst tictac =\r\n[\r\n             \r\n        [ \r\n            { cssClasses: [classes.TdCorner], divClasses: [], value:''},\r\n            { cssClasses: [classes.TdTop], divClasses: [], value: '' },\r\n            { cssClasses: [classes.TdCorner], divClasses: [], value: ''}\r\n        ],\r\n        \r\n        [\r\n            { cssClasses: [classes.TdLeft], divClasses: [], value: ''},\r\n            { cssClasses: [classes.TdTop], divClasses: [], value: ''},\r\n            { cssClasses: [classes.TdRight], divClasses: [], value: ''}\r\n        ],\r\n        [                    \r\n            { cssClasses: [classes.TdCorner], divClasses: [], value: ''},\r\n            { cssClasses: [classes.TdBottom], divClasses: [], value: ''},\r\n            { cssClasses: [classes.TdCorner], divClasses: [], value: ''}                    \r\n        ]\r\n]\r\n\r\nclass TicTac extends Component{\r\n\r\n    state ={\r\n        tictac : JSON.parse(JSON.stringify(tictac)),\r\n        isCircle: true,\r\n        isGameFinished: false,\r\n    }\r\n\r\n    reset = () => {        \r\n        this.setState({tictac : JSON.parse(JSON.stringify(tictac))});\r\n        this.setState({isGameFinished: false});\r\n    }\r\n\r\n    onCellClick = (rowId, colId) => {\r\n        if(this.state.tictac[rowId][colId].divClasses.length || this.state.isGameFinished)\r\n            return;\r\n\r\n        const tictac = JSON.parse(JSON.stringify(this.state.tictac));        \r\n\r\n        let divClasses = [...tictac[rowId][colId].divClasses];\r\n\r\n        if(this.state.isCircle){\r\n            divClasses.push(classes.Circle);\r\n            tictac[rowId][colId].value = 'O';\r\n        }else{\r\n            divClasses.push(classes.Cross);\r\n            tictac[rowId][colId].value = 'X';\r\n        }\r\n        \r\n        tictac[rowId][colId].divClasses = divClasses;\r\n\r\n\r\n        const newTicTac = this.checkWinner(rowId, colId, JSON.parse(JSON.stringify(tictac)), tictac[rowId][colId].value);\r\n        this.setState({tictac: newTicTac});\r\n        this.setState((prevState) => {\r\n            return {isCircle: !prevState.isCircle}\r\n        })\r\n    }\r\n\r\n    /* Recursive function to find winner */\r\n    traverseTicTac = (tictac, rowId, colId, op, searchValue) => {\r\n                \r\n        if(op === 'colPlus1' || op === 'rowMinus1colPlus1' || op === 'rowcolPlus1') {\r\n            colId = colId + 1;\r\n        }\r\n\r\n        if(op === 'rowPlus1' || op === 'rowPlus1colMinus1' || op === 'rowcolPlus1') {                    \r\n            rowId = rowId + 1;            \r\n        }\r\n\r\n        if(op === 'colMinus1' || op === 'rowcolMinus1' || op === 'rowPlus1colMinus1') {\r\n            colId = colId - 1;\r\n        }\r\n\r\n        if(op === 'rowMinus1' || op === 'rowcolMinus1' || op === 'rowMinus1colPlus1') {\r\n            rowId = rowId - 1;            \r\n        }\r\n\r\n        if(rowId > 2 || rowId < 0 || colId > 2 || colId < 0){            \r\n            return [];\r\n        }\r\n            \r\n        if(tictac[rowId][colId].value !== searchValue || tictac[rowId][colId].value === ''){             \r\n            return [];\r\n        } \r\n\r\n        if(tictac[rowId][colId].value === searchValue) {            \r\n            return this.traverseTicTac(tictac, rowId, colId, op, searchValue)\r\n                       .concat([{\r\n                            rowId: rowId,\r\n                            colId: colId\r\n                       }]);\r\n        }\r\n    };  \r\n\r\n\r\n    checkWinner = (rowId, colId, tictac, searchValue) => {    \r\n\r\n        let cellsToBeHighlighted = [];    \r\n        const currentCell = [{\r\n                                rowId: rowId,\r\n                                colId: colId\r\n                            }]\r\n        /** Travel in 8 direction to find winner */             \r\n        const traverseVert = this.traverseTicTac(tictac, rowId, colId, 'rowMinus1', searchValue)\r\n            .concat(this.traverseTicTac(tictac, rowId, colId, 'rowPlus1', searchValue)).concat(currentCell);\r\n        const traverseHor = this.traverseTicTac(tictac, rowId, colId, 'colMinus1', searchValue)\r\n            .concat(this.traverseTicTac(tictac, rowId, colId, 'colPlus1', searchValue)).concat(currentCell);      \r\n        const traverseDiagLeftRight = this.traverseTicTac(tictac, rowId, colId, 'rowcolMinus1', searchValue)\r\n            .concat(this.traverseTicTac(tictac, rowId, colId, 'rowcolPlus1', searchValue)).concat(currentCell);\r\n        const traverseDiagRightLeft  = this.traverseTicTac(tictac, rowId, colId, 'rowMinus1colPlus1', searchValue)\r\n            .concat(this.traverseTicTac(tictac, rowId, colId, 'rowPlus1colMinus1', searchValue)).concat(currentCell);\r\n\r\n        cellsToBeHighlighted = traverseVert.length === 3 ?  cellsToBeHighlighted.concat(traverseVert) :  cellsToBeHighlighted;\r\n        cellsToBeHighlighted = traverseHor.length === 3  ?  cellsToBeHighlighted.concat(traverseHor) :  cellsToBeHighlighted;\r\n        cellsToBeHighlighted = traverseDiagLeftRight.length === 3 ?  cellsToBeHighlighted.concat(traverseDiagLeftRight) :  cellsToBeHighlighted;                   \r\n        cellsToBeHighlighted = traverseDiagRightLeft.length === 3 ?  cellsToBeHighlighted.concat(traverseDiagRightLeft) :  cellsToBeHighlighted;     \r\n\r\n        let newTicTac = cellsToBeHighlighted.length ? this.highlightWinner(cellsToBeHighlighted, JSON.parse(JSON.stringify(tictac))) : tictac;    \r\n                            \r\n        return newTicTac;    \r\n    }\r\n\r\n    highlightWinner = (cellsToHighlight, tictac) => {\r\n        let divClasses = null;\r\n        let winner = '';\r\n\r\n        for(const cell of cellsToHighlight){\r\n            divClasses = [...tictac[cell.rowId][cell.colId].divClasses]\r\n            winner = tictac[cell.rowId][cell.colId].value;\r\n            if(winner === 'X'){\r\n                divClasses.pop(classes.Cross);\r\n                divClasses.push(classes.CrossSuccess);\r\n            }else{\r\n                divClasses.pop(classes.Circle);\r\n                divClasses.push(classes.CircleSuccess);\r\n            }\r\n            tictac[cell.rowId][cell.colId].divClasses = divClasses;       \r\n        } \r\n\r\n        winner === 'X' ? this.setState({winnerClass: classes.CrossSuccess}) : this.setState({ winnerClass: classes.CircleSuccess});\r\n        this.setState({isGameFinished: true});\r\n        return tictac;\r\n    }\r\n\r\n    render() {  \r\n        let winMessage = null;\r\n        if(this.state.isGameFinished){\r\n            winMessage = <div className={classes.WinnerMessage}><div className={this.state.winnerClass}></div> WINNER!!!</div>\r\n        }\r\n        \r\n        return (\r\n           <React.Fragment>\r\n            {winMessage}\r\n            <table className={classes.Table}>\r\n                <tbody>\r\n                    {this.state.tictac.map((_, rowId) => {                    \r\n                        return <tr key={rowId}>\r\n                            {\r\n                            this.state.tictac[rowId].map((_, colId) => {                             \r\n                                return <td className={this.state.tictac[rowId][colId].cssClasses.join(' ')} key={colId}>\r\n                                        <div className={this.state.tictac[rowId][colId].divClasses.concat(classes.Cell).join(' ')}\r\n                                            onClick={() => this.onCellClick(rowId ,colId)}/>\r\n                                        </td>\r\n                                })\r\n                            }\r\n                        </tr>\r\n                    })  \r\n                    }\r\n                </tbody>  \r\n            </table>  \r\n            <br/><br/>            \r\n            <p><button className={classes.Button} onClick={this.reset}>Reset</button></p>\r\n          </React.Fragment> \r\n        );\r\n    }\r\n}\r\n\r\nexport default TicTac;","import React from 'react';\nimport './App.css';\nimport TicTac from './TicTac/TicTac';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TicTac/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}